@page "/peliculas/buscar"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject SweetAlertService swal
<h3>Filtro películas</h3>
<div class="row g-3 align-items-center mb-3">
    <div class="col-sm-3">
        <input type="text" class="form-control" id="titulo" placeholder="Titulo película"
                autocomplete="off"
               @bind-value="titulo" @bind-value:event="oninput"
               @onkeypress="@((KeyboardEventArgs e)=> TituloKeyPress(e))" />
    </div>
    <div class="col-sm-3">
        <select class="form-select" @bind="generoSeleccionado">
            <option value="">-- Seleccione un género --</option>
            @foreach (var item in generos)
            {
                <option value="@item.IdGenero">@item.NombreGenero</option>
            }
        </select>
    </div>
    <div class="col-sm-6" style="display: flex;">
        <div class="form-check me-2">
            <input type="checkbox" class="form-check-input" id="estrenos" @bind="FuturosEstrenos" />
            <label class="form-check-label" for="estrenos"> Futuros Estrenos</label>
        </div>
        <div class="form-check me-2">
            <input type="checkbox" class="form-check-input" id="cartelera" @bind="EnCartelera" />
            <label class="form-check-label" for="cartelera"> En Cartelera</label>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="masVotadas" @bind="masVotadas" />
            <label class="form-check-label" for="masVotadas"> Más Votadas</label>
        </div>
    </div>
    <div class="col-12">
        <button type="button" class="btn btn-primary" @onclick="CargarNuevasPeliculas">Filtrar</button>
        <button type="button" class="btn btn-danger" @onclick="LimpiarOnClick">Limpiar</button>
    </div>
    <Paginacion PaginaActual="PaginaActual" PaginasTotales="PaginasTotales" PaginaSeleccionada="PaginaSeleccionada"></Paginacion>
    <ListadoPeliculas Peliculas="Peliculas">

    </ListadoPeliculas>
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string titulo { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery(Name = "idgenero")]
    public int generoSeleccionado{ get; set; } 
    private List<Genero> generos = new List<Genero>();

    [Parameter]
    [SupplyParameterFromQuery(Name ="estrenos")]
    public bool FuturosEstrenos { get; set; } = false;
    [Parameter]
    [SupplyParameterFromQuery]
    public bool EnCartelera { get; set; } = false;
    [Parameter]
    [SupplyParameterFromQuery]
    public bool masVotadas { get; set; } = false;
    private Dictionary<string, string> queryStringsDic = new Dictionary<string, string>();
    [Parameter]
    [SupplyParameterFromQuery(Name = "pagina")]
    public int PaginaActual { get; set; } = 1;
    private List<Pelicula> Peliculas;
    private int PaginasTotales;
    protected override async Task OnInitializedAsync()
    {
        if (PaginaActual==0)
        {
            PaginaActual = 1;
        }
        await ObtenerGeneros();
        var queryStrings = GenerarQueryStrings();
        await RealizarBusqueda(queryStrings);
    }

    private async Task ObtenerGeneros()
    {
        var respuestaHTTP = await repositorio.Get<List<Genero>>("api/generos");
        generos = respuestaHTTP.Response!;

    }
    private async Task TituloKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CargarNuevasPeliculas();
        }
    }

    private async Task CargarNuevasPeliculas()
    {
        var queryStrings = GenerarQueryStrings();
        navigationManager.NavigateTo("peliculas/buscar?" + queryStrings);
        await RealizarBusqueda(queryStrings);
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var respuestaHTTP = await repositorio.Get<List<Pelicula>>("api/peliculas/filtrar?" + queryStrings);
        PaginasTotales = int.Parse(respuestaHTTP.HttpResponseMessage
            .Headers.GetValues("totalPaginas").FirstOrDefault()!);
        if (respuestaHTTP.Error)
        {
            if (respuestaHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("peliculas");
            }
            else
            {
                var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            Peliculas = respuestaHTTP.Response;
        }


    }
    private async Task PaginaSeleccionada(int pagina)
    {
        PaginaActual = pagina;
        await CargarNuevasPeliculas();
    }
    private string GenerarQueryStrings()
    {

        if (queryStringsDic is null)
        {
            queryStringsDic = new Dictionary<string, string>();
        }

        queryStringsDic["idgenero"] =  generoSeleccionado.ToString() ;
        queryStringsDic["titulo"] = titulo?? string.Empty;
        queryStringsDic["encartelera"] = EnCartelera.ToString();
        queryStringsDic["estrenos"] = FuturosEstrenos.ToString();
        queryStringsDic["masvotadas"] = masVotadas.ToString();
        queryStringsDic["pagina"] = PaginaActual.ToString();
        var valoresPorDefecto = new List<string> { "false", "", "0" };
        return string.Join("&", queryStringsDic.Where(x =>
            !valoresPorDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray()
            );


    }

    private async Task LimpiarOnClick()
    {

        titulo = "";
        generoSeleccionado = 0;
        FuturosEstrenos = false;
        EnCartelera = false;
        masVotadas = false;
        await CargarNuevasPeliculas();
    }
}
